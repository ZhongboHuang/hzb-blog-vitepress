import{_ as a,o as s,c as n,Q as l}from"./chunks/framework.5408072b.js";const u=JSON.parse('{"title":"前端面试题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/index.md","filePath":"interview/index.md","lastUpdated":1695023244000}'),o={name:"interview/index.md"},p=l(`<h1 id="前端面试题" tabindex="-1">前端面试题 <a class="header-anchor" href="#前端面试题" aria-label="Permalink to &quot;前端面试题&quot;">​</a></h1><h2 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h2><h3 id="_1-浏览器的缓存机制" tabindex="-1">1. 浏览器的缓存机制 <a class="header-anchor" href="#_1-浏览器的缓存机制" aria-label="Permalink to &quot;1. 浏览器的缓存机制&quot;">​</a></h3><p><strong>强缓存和协商缓存</strong></p><h3 id="_2-什么是浏览器的重绘和重排" tabindex="-1">2. 什么是浏览器的重绘和重排 <a class="header-anchor" href="#_2-什么是浏览器的重绘和重排" aria-label="Permalink to &quot;2. 什么是浏览器的重绘和重排&quot;">​</a></h3><p><strong>重绘</strong>：当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。</p><p><strong>重排</strong>：当DOM的变化影响了元素的几何信息(DOM对象的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排,重排也叫回流.</p><h3 id="_3-http请求中常见的content-type类型" tabindex="-1">3. Http请求中常见的Content-Type类型 <a class="header-anchor" href="#_3-http请求中常见的content-type类型" aria-label="Permalink to &quot;3. Http请求中常见的Content-Type类型&quot;">​</a></h3><ul><li>application/x-www-form-urlencoded</li></ul><p>最常见的POST提交数据的方式。原生Form表单，如果不设置enctype属性，默认为application/x-www-form-urlencoded方式提交数据。</p><ul><li>application/form-data</li></ul><p>Form表单enctype属性设置为multipart/form-data，它会将表单的数据处理为一条消息，以标签为单元，用分隔符（这就是boundary的作用）分开。</p><p>这种方式既可以上传键值对，也可以上传文件，甚至多个文件。</p><ul><li>application/json</li></ul><p>告诉服务端消息主体是序列化后的JSON字符串。</p><ul><li>text/xml</li></ul><p>XML的作用不言而喻，用于传输和存储数据，它非常适合万维网传输，提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。</p><ul><li>binary</li></ul><p>二进制文件类型</p><h3 id="_4-从输入url到浏览器显示页面的过程中都发生了什么" tabindex="-1">4. 从输入url到浏览器显示页面的过程中都发生了什么 <a class="header-anchor" href="#_4-从输入url到浏览器显示页面的过程中都发生了什么" aria-label="Permalink to &quot;4. 从输入url到浏览器显示页面的过程中都发生了什么&quot;">​</a></h3><ul><li><p><strong>URL解析</strong></p></li><li><p><strong>缓存判断</strong></p></li><li><p><strong>DNS解析</strong></p></li><li><p><strong>获取MAC地址</strong></p></li><li><p><strong>TCP三次握手</strong></p></li><li><p><strong>HTTPS握手</strong></p></li><li><p><strong>返回数据</strong></p></li><li><p><strong>页面渲染</strong></p></li></ul><p>根据html构建DOM树 -&gt; 根据css文件构建CSSOM树 -&gt; 遇到script标签判断是否含有defer和async属性，否则会阻塞页面渲染 -&gt; 构建渲染树 -&gt; 根据渲染树布局 -&gt; 绘制</p><ul><li><strong>TCP四次挥手</strong></li></ul><h2 id="css" tabindex="-1">Css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;Css&quot;">​</a></h2><h3 id="_1-实现垂直居中的方式" tabindex="-1">1. 实现垂直居中的方式 <a class="header-anchor" href="#_1-实现垂直居中的方式" aria-label="Permalink to &quot;1. 实现垂直居中的方式&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;box&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;son&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">.box</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">flex</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">align-items</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">center</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">justify-content</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">center</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;box&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;son&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">.box</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">display</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">flex</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">align-items</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">center</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">justify-content</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">center</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_2-rem-em-vw-px-pt-分别是什么含义" tabindex="-1">2. rem, em, vw, px, pt 分别是什么含义 <a class="header-anchor" href="#_2-rem-em-vw-px-pt-分别是什么含义" aria-label="Permalink to &quot;2. rem, em, vw, px, pt 分别是什么含义&quot;">​</a></h3><p><strong>rem</strong>: HTML根元素字体大小的相对单位</p><p><strong>em</strong>: 相对长度单位，相对于当前对象内文本的字体尺寸，指的是字符宽度的倍数，用法类似百分比，如：0.8em, 1.2em,2em等。通常1em=16px</p><p><strong>vw</strong>: 100vw 为当前屏幕的宽度</p><p><strong>px</strong>: 每英寸像素数</p><p><strong>pt</strong>: point，磅，是一个物理长度单位，指的是72分之一英寸。pt=1/72(英寸), px=1/dpi(英寸)</p><h2 id="javascript" tabindex="-1">Javascript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;Javascript&quot;">​</a></h2><h3 id="_1-如何判断是object还是array" tabindex="-1">1. 如何判断是Object还是Array? <a class="header-anchor" href="#_1-如何判断是object还是array" aria-label="Permalink to &quot;1. 如何判断是Object还是Array?&quot;">​</a></h3><p>使用 <code>Object.prototype.toString.call()</code>，<strong>Object</strong> 返回 <code>&#39;[object Object]&#39;</code>，<strong>Array</strong> 返回 <code>&#39;[Object Array]&#39;</code></p><h3 id="_2-闭包和闭包的缺点" tabindex="-1">2. 闭包和闭包的缺点? <a class="header-anchor" href="#_2-闭包和闭包的缺点" aria-label="Permalink to &quot;2. 闭包和闭包的缺点?&quot;">​</a></h3><h3 id="_3-call-bind-apply-的作用和区别" tabindex="-1">3. call, bind, apply 的作用和区别? <a class="header-anchor" href="#_3-call-bind-apply-的作用和区别" aria-label="Permalink to &quot;3. call, bind, apply 的作用和区别?&quot;">​</a></h3><p><strong>作用</strong>：用来改变函数内部<code>this</code>的指向</p><p><strong>bind 和 call/apply 的区别</strong>：<code>bind</code>会返回<code>fn</code>的一个拷贝，并且不会立即执行；<code>call/apply</code>会立即执行并返回<code>fn</code>的返回值</p><p><strong>call 和 apply</strong> 的区别：传给<code>fn</code>的参数写法不同，<code>call</code>第一个参数为函数上下文也就是<code>this</code>，后面参数为函数本身的参数；<code>apply</code>的第一个参数也是<code>this</code>，第二个参数为函数参数组成的数组。</p><h3 id="_4-原型链是什么" tabindex="-1">4. 原型链是什么? <a class="header-anchor" href="#_4-原型链是什么" aria-label="Permalink to &quot;4. 原型链是什么?&quot;">​</a></h3><h3 id="_5-javascript的事件循环机制" tabindex="-1">5. JavaScript的事件循环机制 <a class="header-anchor" href="#_5-javascript的事件循环机制" aria-label="Permalink to &quot;5. JavaScript的事件循环机制&quot;">​</a></h3><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h2 id="typescript" tabindex="-1">Typescript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;Typescript&quot;">​</a></h2><h3 id="_1-ts中泛型的使用场景" tabindex="-1">1. ts中泛型的使用场景 <a class="header-anchor" href="#_1-ts中泛型的使用场景" aria-label="Permalink to &quot;1. ts中泛型的使用场景&quot;">​</a></h3><h2 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h2><h3 id="_1-vue的通信方式-父子、爷孙、兄弟、顶级" tabindex="-1">1. vue的通信方式，父子、爷孙、兄弟、顶级? <a class="header-anchor" href="#_1-vue的通信方式-父子、爷孙、兄弟、顶级" aria-label="Permalink to &quot;1. vue的通信方式，父子、爷孙、兄弟、顶级?&quot;">​</a></h3><p>父子: props/emits; v-model; defineExpose; $children/$parent; ref/refs</p><p>爷孙(多层级): $attrs/$listeners(vue3中取消了$listeners); provide/inject</p><p>兄弟: vuex、pinia</p><p>顶级: eventBus/mitt; localStorage/sessionStorage</p><h3 id="_2-v-for使用中为什么不建议使用index作为key" tabindex="-1">2. v-for使用中为什么不建议使用index作为key? <a class="header-anchor" href="#_2-v-for使用中为什么不建议使用index作为key" aria-label="Permalink to &quot;2. v-for使用中为什么不建议使用index作为key?&quot;">​</a></h3><h3 id="_3-diff算法中key的作用" tabindex="-1">3. diff算法中key的作用? <a class="header-anchor" href="#_3-diff算法中key的作用" aria-label="Permalink to &quot;3. diff算法中key的作用?&quot;">​</a></h3><h3 id="_4-双向数据绑定是如何实现的" tabindex="-1">4. 双向数据绑定是如何实现的? <a class="header-anchor" href="#_4-双向数据绑定是如何实现的" aria-label="Permalink to &quot;4. 双向数据绑定是如何实现的?&quot;">​</a></h3><h3 id="_5-如何实现v-model" tabindex="-1">5. 如何实现v-model? <a class="header-anchor" href="#_5-如何实现v-model" aria-label="Permalink to &quot;5. 如何实现v-model?&quot;">​</a></h3><h3 id="_6-什么是diff算法" tabindex="-1">6. 什么是diff算法? <a class="header-anchor" href="#_6-什么是diff算法" aria-label="Permalink to &quot;6. 什么是diff算法?&quot;">​</a></h3><h2 id="小程序" tabindex="-1">小程序 <a class="header-anchor" href="#小程序" aria-label="Permalink to &quot;小程序&quot;">​</a></h2><h3 id="_1-小程序键盘弹起遮住输入框如何处理" tabindex="-1">1. 小程序键盘弹起遮住输入框如何处理 <a class="header-anchor" href="#_1-小程序键盘弹起遮住输入框如何处理" aria-label="Permalink to &quot;1. 小程序键盘弹起遮住输入框如何处理&quot;">​</a></h3><h3 id="_2-小程序的生命周期" tabindex="-1">2. 小程序的生命周期 <a class="header-anchor" href="#_2-小程序的生命周期" aria-label="Permalink to &quot;2. 小程序的生命周期&quot;">​</a></h3><h2 id="移动端" tabindex="-1">移动端 <a class="header-anchor" href="#移动端" aria-label="Permalink to &quot;移动端&quot;">​</a></h2><h3 id="_1-移动端如何实现自适应" tabindex="-1">1. 移动端如何实现自适应 <a class="header-anchor" href="#_1-移动端如何实现自适应" aria-label="Permalink to &quot;1. 移动端如何实现自适应&quot;">​</a></h3><ul><li>rem + vw、vh 方案</li></ul><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 使用sass自定义单位</span></span>
<span class="line"><span style="color:#F97583;">@use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;sass:math&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">@function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pxToRem</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">$px</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">@return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">div</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">$px</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> rem;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 375*812</span></span>
<span class="line"><span style="color:#F97583;">@function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pxToVW</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">$px</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">@return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">div</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">$px</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.75</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> vw;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">@function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pxToVH</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">$px</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">@return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">div</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">$px</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8.12</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> vh;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用sass自定义单位</span></span>
<span class="line"><span style="color:#D73A49;">@use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sass:math&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">@function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pxToRem</span><span style="color:#24292E;">(</span><span style="color:#E36209;">$px</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">@return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">math</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">div</span><span style="color:#24292E;">(</span><span style="color:#E36209;">$px</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> rem;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 375*812</span></span>
<span class="line"><span style="color:#D73A49;">@function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pxToVW</span><span style="color:#24292E;">(</span><span style="color:#E36209;">$px</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">@return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">math</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">div</span><span style="color:#24292E;">(</span><span style="color:#E36209;">$px</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.75</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> vw;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">@function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pxToVH</span><span style="color:#24292E;">(</span><span style="color:#E36209;">$px</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">@return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">math</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">div</span><span style="color:#24292E;">(</span><span style="color:#E36209;">$px</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8.12</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> vh;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><p>scale</p></li><li><p>vw、vh</p></li></ul><h2 id="http" tabindex="-1">Http <a class="header-anchor" href="#http" aria-label="Permalink to &quot;Http&quot;">​</a></h2><h3 id="_1-get和post的区别" tabindex="-1">1. get和post的区别 <a class="header-anchor" href="#_1-get和post的区别" aria-label="Permalink to &quot;1. get和post的区别&quot;">​</a></h3><h2 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h2><h3 id="_1-项目性能优化" tabindex="-1">1. 项目性能优化 <a class="header-anchor" href="#_1-项目性能优化" aria-label="Permalink to &quot;1. 项目性能优化&quot;">​</a></h3><h3 id="_2-小程序如何处理安全区域和刘海屏" tabindex="-1">2. 小程序如何处理安全区域和刘海屏 <a class="header-anchor" href="#_2-小程序如何处理安全区域和刘海屏" aria-label="Permalink to &quot;2. 小程序如何处理安全区域和刘海屏&quot;">​</a></h3><h3 id="_3-大屏适配方案" tabindex="-1">3. 大屏适配方案 <a class="header-anchor" href="#_3-大屏适配方案" aria-label="Permalink to &quot;3. 大屏适配方案&quot;">​</a></h3><h3 id="_4-实现文件上传" tabindex="-1">4. 实现文件上传 <a class="header-anchor" href="#_4-实现文件上传" aria-label="Permalink to &quot;4. 实现文件上传&quot;">​</a></h3><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><h3 id="_1-js代码有哪些优化方式" tabindex="-1">1. JS代码有哪些优化方式 <a class="header-anchor" href="#_1-js代码有哪些优化方式" aria-label="Permalink to &quot;1. JS代码有哪些优化方式&quot;">​</a></h3><h3 id="_2-图片如何优化" tabindex="-1">2. 图片如何优化 <a class="header-anchor" href="#_2-图片如何优化" aria-label="Permalink to &quot;2. 图片如何优化&quot;">​</a></h3>`,74),e=[p];function t(r,c,i,y,E,h){return s(),n("div",null,e)}const b=a(o,[["render",t]]);export{u as __pageData,b as default};
